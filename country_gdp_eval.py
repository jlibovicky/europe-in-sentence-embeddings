#!/usr/bin/env python3

import argparse
from itertools import chain, combinations
import json
import logging
import random
import sys

import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score, accuracy_score
import scipy.stats
from tqdm import tqdm


logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

# Data comes from World Bank via Our World in Data
#https://ourworldindata.org/grapher/gdp-per-capita-worldbank


COUNTRY_GDP = {
    "at": [53166, 51030, 51843, 53179, 53297, 52997, 52932, 52873, 53345, 54172, 55258, 55833, 51857],
    "ba": [11035, 10755, 10938, 11176, 11257, 11725, 12066, 12630, 13194, 13753, 14386, 14896, 14509],
    "be": [48423, 47064, 47972, 48154, 48210, 48204, 48748, 49456, 49829, 50442, 51126, 51944, 48769],
    "bg": [18250, 17767, 18160, 18661, 18911, 18911, 19202, 19988, 20740, 21469, 22206, 23265, 22379],
    "by": [15942, 16014, 17300, 18274, 18611, 18805, 19119, 18362, 17883, 18356, 18974, 19279, 19186],
    "ch": [66598, 64404, 65819, 66342, 66440, 66877, 67682, 68025, 68663, 69103, 70597, 70944, 68755],
    "cs": [34580, 32782, 33483, 34002, 33688, 33661, 34386, 36168, 37014, 38824, 39932, 40981, 38511],
    "cy": [40397, 38535, 38296, 37481, 35642, 33384, 33136, 34453, 36509, 38287, 39977, 41521, 38816],
    "da": [52982, 50114, 50825, 51293, 51216, 51479, 52048, 52892, 54185, 55356, 56178, 57161, 55819],
    "de": [47643, 45044, 46999, 49757, 49872, 49954, 50845, 51159, 51879, 53071, 53486, 53929, 51423],
    "el": [37394, 35692, 33693, 30318, 28322, 27810, 28129, 28260, 28239, 28604, 29141, 29698, 27072],
    "es": [39240, 37430, 37319, 36884, 35769, 35371, 35968, 37377, 38477, 39528, 40256, 40802, 36210],
    "et": [29621, 25337, 26015, 27990, 28997, 29525, 30494, 31038, 32008, 33821, 35097, 36401, 35257],
    "fi": [48817, 44662, 45874, 46825, 45952, 45328, 44976, 45072, 46206, 47570, 48049, 48582, 47154],
    "fr": [42996, 41546, 42147, 42864, 42790, 42816, 43021, 43345, 43705, 44577, 45284, 46017, 42320],
    "hu": [25835, 24168, 24486, 25012, 24825, 25343, 26485, 27531, 28218, 29501, 31121, 32553, 31098],
    "hr": [26670, 24754, 24500, 24563, 24078, 24057, 24072, 24884, 25944, 27154, 28192, 29336, 27076],
    "ie": [55712, 52336, 52965, 53298, 53045, 53435, 57668, 71508, 72150, 77749, 83726, 86650, 90789],
    "is": [52999, 48770, 47457, 48186, 48440, 50168, 50450, 52142, 54665, 55638, 56818, 56935, 52375],
    "it": [44623, 42074, 42664, 42892, 41501, 40268, 39898, 40247, 40837, 41581, 42045, 42708, 39073],
    "lv": [24903, 21710, 21176, 22118, 23970, 24715, 25423, 26628, 27509, 28673, 30050, 31012, 30100],
    "lt": [26784, 23065, 23942, 25968, 27330, 28589, 29855, 30748, 31925, 33761, 35446, 37166, 37107],
    "lu": [118154, 112230, 114343, 112998, 112137, 113050, 113313, 113182, 116283, 114985, 115049, 116518, 112557],
    "nl": [53848, 51607, 52032, 52594, 51860, 51640, 52186, 52974, 53847, 55088, 56060, 56784, 54324],
    "md": [8473, 7975, 8550, 9052, 9000, 9817, 10314, 10360, 10942, 11651, 12363, 13026, 12324],
    "me": [17391, 16348, 16764, 17287, 16802, 17381, 17674, 18263, 18797, 19682, 20686, 21533, 18258],
    "mk": [13174, 13103, 13514, 13807, 13727, 14108, 14596, 15139, 15553, 15706, 16145, 16773, 15931],
    "mt": [31893, 31294, 32867, 32881, 33929, 35287, 37230, 39845, 40536, 42644, 43313, 43950, 39979],
    "no": [63570, 61689, 61353, 61157, 61990, 61878, 62390, 62987, 63104, 64050, 64341, 64385, 63548],
    "pt": [32307, 31269, 31798, 31304, 30156, 30042, 30444, 31118, 31847, 33044, 34040, 34945, 31961],
    "pl": [22444, 23064, 23996, 25124, 25457, 25759, 26649, 27797, 28682, 30064, 31674, 33185, 32398],
    "ro": [22044, 21002, 20303, 20792, 21311, 22197, 23084, 23878, 25144, 27141, 28523, 29875, 28870],
    "ru": [24887, 22939, 23961, 24972, 25933, 26332, 26057, 25488, 25490, 25926, 26656, 27210, 26456],
    "sk": [25460, 24039, 25528, 26168, 26478, 26623, 27322, 28719, 29236, 30061, 31159, 31927, 30509],
    "sl": [36075, 33052, 33350, 33568, 32613, 32234, 33093, 33799, 34853, 36507, 37984, 38946, 37050],
    "sq": [9912, 10313, 10749, 11052, 11227, 11361, 11586, 11878, 12291, 12770, 13317, 13656, 13191],
    "sr": [14691, 14347, 14510, 14923, 14894, 15399, 15226, 15578, 16182, 16611, 17452, 18306, 18255],
    "sv": [47963, 45492, 47791, 48947, 48300, 48462, 49258, 50928, 51334, 51947, 52349, 52850, 50923],
    "tr": [19933, 18731, 20027, 21932, 22610, 24117, 24881, 25958, 26385, 27913, 28318, 28197, 28393],
    "ua": [13719, 11694, 12221, 12933, 12985, 13020, 12385, 11216, 11536, 11860, 12336, 12804, 12375],
    "uk": [43767, 41592, 42147, 42429, 42754, 43271, 44239, 45041, 45712, 46372, 46853, 47368, 42675],
    "xk": [7032, 7327, 7627, 8040, 8105, 8486, 8796, 9445, 10031, 10436, 10755, 11318, 10706]
}


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("input", type=argparse.FileType("r"))
    parser.add_argument("readable_output", type=argparse.FileType("w"), nargs="?", default=sys.stdout)
    parser.add_argument("--json-output", type=argparse.FileType("w"), default=None, required=False)
    parser.add_argument("--confidence", type=float, default=0.95)
    args = parser.parse_args()

    all_gdp_values = []
    all_pca_values = []
    logging.info("Load data from '%s'.", args.input)
    for line in args.input:
        tokens = line.strip().split(",")
        all_gdp_values.append(COUNTRY_GDP[tokens[0]])
        values = [float(x) for x in tokens[1:]]
        all_pca_values.append(values)

    all_pca_values = np.array(all_pca_values)
    all_gdp_values = np.array(all_gdp_values)

    logging.info("Compute correlations scores.")
    for i, values in enumerate(all_pca_values.T[:3]):
        best_year = None
        best_corr = 0.0
        for year, gdps in zip(range(2008, 2021), all_gdp_values.T):
            corr = scipy.stats.pearsonr(gdps, values)
            if corr.pvalue < 0.05 and np.abs(corr.statistic) > best_corr:
                best_corr = np.abs(corr.statistic)
                best_year = year

        print(f"PCA {i + 1}    year: {best_year}, corr: {best_corr}")


    logging.info("Done.")


if __name__ == "__main__":
    main()
